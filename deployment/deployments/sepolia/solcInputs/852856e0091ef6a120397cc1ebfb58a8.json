{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISdexLpConduit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3 \n\npragma solidity 0.8.19;\n\nimport '../libraries/Directives.sol';\n\n/* @title LP conduit interface\n * @notice Standard interface for contracts that accept and manage LP positions on behalf\n *         of end users. Typical example would be an ERC20 tracker for LP tokens. */\ninterface ISdexLpConduit {\n\n    /* @notice Called anytime a user mints liquidity against the conduit instance. To \n     *         utilize the user would call a mint operation on the dex with the address\n     *         of the LP conduit they want to use. This method will be called to notify\n     *         conduit contract (e.g. to perform tracking), and the LP position will be\n     *         held in the name of the conduit.\n     *\n     * @param sender The address of the user that owns the newly minted position.\n     * @param poolHash The hash (see PoolRegistry.sol) of the AMM pool the liquidity is\n     *                 minted on.\n     * @param lowerTick The tick index of the lower range (0 if ambient liquidity)\n     * @param upperTick The tick index of the upper range (0 if ambient liquidity)\n     * @param liq       The amount of liquidity being minted. If ambient liquidity this\n     *                  is denominated as ambient seeds. If concentrated this is flat\n     *                  sqrt(X*Y) liquidity of the liquidity minted.\n     * @param mileage   The accumulated fee mileage (see PositionRegistrar.sol) of the \n     *                  concentrated liquidity at mint time. If ambient, this is zero.\n     *\n     * @return   Return false if the conduit implementation does not accept the liquidity\n     *           deposit. Reverts the transaction. */\n    function depositSdexLiq (address sender, bytes32 poolHash,\n                             int24 lowerTick, int24 upperTick,\n                             uint128 liq, uint72 mileage) external returns (bool);\n\n    function withdrawSdexLiq (address sender, bytes32 poolHash,\n                              int24 lowerTick, int24 upperTick,\n                              uint128 liq, uint72 mileage) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ISdexMinion.sol": {
      "content": "// SPDX-License-Identifier: GPL-3 \n\npragma solidity 0.8.19;\n\nimport '../libraries/CurveCache.sol';\n\n/* @notice Simple interface that defines the surface between the SdexSwapDex\n *         itself and protocol governance and policy. All governance actions are\n *         are executed through the single protocolCmd() method. */\ninterface ISdexMinion {\n\n    /* @notice Calls a general governance authorized command on the SdexSwapDex contract.\n     *\n     * @param proxyPath The proxy callpath sidecar to execute the command within. (Will\n     *                  call protocolCmd\n     * @param cmd       The underlying command content to pass to the proxy sidecar call.\n     *                  Will DELEGATECALL (protocolCmd(cmd) on the sidecar proxy.\n     * @param sudo      Set to true for commands that require escalated privilege (e.g. \n     *                  authority transfers or upgrades.) The ability to call with sudo \n     *                  true should be reserved for privileged callpaths in the governance\n     *                  controller contract. */\n    function protocolCmd (uint16 proxyPath, bytes calldata cmd, bool sudo)\n        payable external;\n}\n\n/* @notice Interface for a contract that directly governs a SdexSwap dex contract. */\ninterface ISdexMaster {\n    /* @notice Used to validate governance contract to prevent authority transfer to an\n     *         an invalid address or contract. */\n    function acceptsSdexAuthority() external returns (bool);\n}"
    },
    "contracts/libraries/CompoundMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\npragma solidity 0.8.19;\n\nimport \"./FixedPoint.sol\";\nimport \"./TickMath.sol\";\nimport \"./SafeCast.sol\";\n\n/* @title Compounding math library\n * @notice Library provides convenient math functionality for various transformations\n *         and reverse transformations related to compound growth. */\nlibrary CompoundMath {\n    using SafeCast for uint256;\n\n    /* @notice Provides a safe lower-bound approximation of the square root of (1+x)\n     *         based on a two-term Taylor series expansion. The purpose is to calculate\n     *         the square root for small compound growth rates. \n     * \n     *         Both the input and output values are passed as the growth rate *excluding*\n     *         the 1.0 multiplier base. For example assume the input (X) is 0.1, then the\n     *         output Y is:\n     *             (1 + Y) = sqrt(1+X)\n     *             (1 + Y) = sqrt(1 + 0.1)\n     *             (1 + Y) = 1.0488 (approximately)\n     *                   Y = 0.0488 (approximately)\n     *         In the example the square root of 10% compound growth is 4.88%\n     *\n     *         Another example, assume the input (X) is 0.6, then the output (Y) is:\n     *             (1 + Y) = sqrt(1+X)\n     *             (1 + Y) = sqrt(1 + 0.6)\n     *             (1 + Y) = 1.264 (approximately)\n     *                   Y = 0.264 (approximately)\n     *         In the example the square root of 60% growth is 26.4% compound growth\n     *\n     *         Another example, assume the input (X) is 0.018, then the output (Y) is:\n     *             (1 + Y) = sqrt(1+X)\n     *             (1 + Y) = sqrt(1 + 0.018)\n     *             (1 + Y) = 1.00896 (approximately)\n     *                   Y = 0.00896 (approximately)\n     *         In the example the square root of 1.8% growth is 0.896% compound growth\n     *\n     * @dev    Due to approximation error, only safe to use on input in the range of \n     *         [0,1). Will always round down from the true real value.\n     *\n     * @param x  The value of x in (1+x). Represented as a Q16.48 fixed-point\n     * @returns   The value of y for which (1+y) = sqrt(1+x). Represented as Q16.48 fixed point\n     * */\n    function approxSqrtCompound (uint64 x64) internal pure returns (uint64) {\n        // Taylor series error becomes too large above 2.0. Approx is still conservative\n        // but the angel's share becomes unreasonable. \n        require(x64 < FixedPoint.Q48);\n\n        unchecked {\n        uint256 x = uint256(x64);\n        // Shift by 48, to bring x^2 back in fixed point precision\n        uint256 xSq = (x * x) >> 48; // x * x never overflows 256 bits, because x is 64 bits\n        uint256 linear = x >> 1; // Linear Taylor series term is x/2\n        uint256 quad = xSq >> 3; // Quadratic Tayler series term ix x^2/8;\n\n        // This will always fit in 64 bits because result is smaller than original/\n        // Will always be greater than 0, because x^2 < x for x < 1\n        return uint64(linear - quad);\n        }\n    }\n\n    /* @notice Computes the result from compounding two cumulative growth rates.\n     * @dev    Rounds down from the real value. Caps the result if type exceeds the max\n     *         fixed-point value.\n     * @param x The compounded growth rate as in (1+x). Represted as Q16.48 fixed-point.\n     * @param y The compounded growth rate as in (1+y). Represted as Q16.48 fixed-point.\n     * @returns The cumulative compounded growth rate as in (1+z) = (1+x)*(1+y).\n     *          Represented as Q16.48 fixed-point. */\n    function compoundStack (uint64 x, uint64 y) internal\n        pure returns (uint64) {\n        unchecked {\n        uint256 ONE = FixedPoint.Q48;\n        uint256 num = (ONE + x) * (ONE + y); // Never overflows 256-bits because x and y are 64 bits\n        uint256 term = num >> 48;  // Divide by 48-bit ONE\n        uint256 z = term - ONE; // term will always be >= ONE\n        if (z >= type(uint64).max) { return type(uint64).max; }\n        return uint64(z);\n        }\n    }\n\n    /* @notice Computes the result from backing out a compounded growth value from\n     *         an existing value. The inverse of compoundStack().\n     * @dev    Rounds down from the real value.\n     * @param val The fixed price representing the starting value that we want\n     *            to back out a pre-growth seed from.\n     * @param deflator The compounded growth rate to back out, as in (1+g). Represented\n     *                 as Q16.48 fixed-point\n     * @returns The pre-growth value as in val/(1+g). Rounded down as an unsigned\n     *          integer. */\n    function compoundShrink (uint64 val, uint64 deflator) internal\n        pure returns (uint64) {\n        unchecked {\n        uint256 ONE = FixedPoint.Q48;\n        uint256 multFactor = ONE + deflator; // Never overflows because both fit inside 64 bits\n        uint256 num = uint256(val) << 48; // multiply by 48-bit ONE\n        uint256 z = num / multFactor; // multFactor will never be zero because it's bounded by 1\n        return uint64(z); // Will always fit in 64-bits because shrink can only decrease\n        }\n    }\n    \n    /* @notice Computes the implied compound growth rate based on the division of two\n     *     arbitrary quantities.\n     * @dev    Based on this function's use, calulated growth rate will always be \n     *         capped at 100%. The implied growth rate must always be non-negative.\n     * @param inflated The larger value to be divided. Any 128-bit integer or fixed point\n     * @param seed The smaller value to use as a divisor. Any 128-bit integer or fixed \n     *             point.\n     * @returns The cumulative compounded growth rate as in (1+z) = (1+x)/(1+y).\n     *          Represeted as Q16.48. */\n    function compoundDivide (uint128 inflated, uint128 seed) internal\n        pure returns (uint64) {\n        // Otherwise arithmetic doesn't safely fit in 256 -bit\n        require(inflated < type(uint208).max && inflated >= seed);\n\n        unchecked {\n        uint256 ONE = FixedPoint.Q48;\n        uint256 num = uint256(inflated) << 48;\n        uint256 z = (num / seed) - ONE; // Never underflows because num is always greater than seed\n\n        if (z >= ONE) { return uint64(ONE); }\n        return uint64(z);\n        }\n    }\n\n    /* @notice Calculates a final price from applying a growth rate to a starting price.\n     * @dev    Always rounds in the direction of @shiftUp\n     * @param price The starting price to be compounded. Q64.64 fixed point.\n     * @param growth The compounded growth rate to apply, as in (1+g). Represented\n     *                as Q16.48 fixed-point\n     * @param shiftUp If true compounds the starting price up, so the result will be \n     *                greater. If false, compounds the price down so the result will be\n     *                smaller than the original price.\n     * @returns The post-growth price as in price*(1+g) (or price*(1-g) if shiftUp is \n     *          false). Q64.64 always rounded in the direction of shiftUp. */\n    function compoundPrice (uint128 price, uint64 growth, bool shiftUp) internal\n        pure returns (uint128) {\n        unchecked {\n        uint256 ONE = FixedPoint.Q48;\n        uint256 multFactor = ONE + growth; // Guaranteed to fit in 65-bits\n        \n        if (shiftUp) {\n            uint256 num = uint256(price) * multFactor; // Guaranteed to fit in 193 bits\n            uint256 z = num >> 48; // De-scale by the 48-bit growth precision\n            return (z+1).toUint128(); // Round in the price shift\n        } else {\n            uint256 num = uint256(price) << 48;\n            // No need to safe cast, since this will be smaller than original price\n            return uint128(num / multFactor); \n        }\n        }\n    }\n\n    \n    /* @notice Inflates a starting value by a cumulative growth rate.\n     * @dev    Rounds down from the real value. Result is capped at max(uint128).\n     * @param seed The pre-inflated starting value as unsigned integer\n     * @param growth Cumulative growth rate as Q16.48 fixed-point\n     * @return The ending value = seed * (1 + growth). Rounded down to nearest\n     *         integer value */\n    function inflateLiqSeed (uint128 seed, uint64 growth)\n        internal pure returns (uint128) {\n        unchecked {\n        uint256 ONE = FixedPoint.Q48;\n        uint256 num = uint256(seed) * uint256(ONE + growth); // Guaranteed to fit in 256\n        uint256 inflated = num >> 48; // De-scale by the 48-bit growth precision;\n        \n        if (inflated > type(uint128).max) { return type(uint128).max; }\n        return uint128(inflated);\n        }\n    }\n\n    /* @notice Deflates a starting value by a cumulative growth rate.\n     * @dev    Rounds down from the real value.\n     * @param liq The post-inflated liquidity as unsigned integer\n     * @param growth Cumulative growth rate as Q16.48 fixed-point\n     * @return The ending value = liq / (1 + growth). Rounded down to nearest\n     *         integer value */\n    function deflateLiqSeed (uint128 liq, uint64 growth)\n        internal pure returns (uint128) {\n        unchecked {\n        uint256 ONE = FixedPoint.Q48;\n        uint256 num = uint256(liq) << 48;\n        uint256 deflated = num / (ONE + growth); // Guaranteed to fit in 256-bits\n        \n        // No need to safe cast-- will allways be smaller than starting\n        return uint128(deflated);\n        }\n    }\n}\n"
    },
    "contracts/libraries/CurveCache.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\n\npragma solidity 0.8.19;\npragma experimental ABIEncoderV2;\n\nimport './CurveMath.sol';\nimport './TickMath.sol';\n\n/* @title Curve caching library.\n * @notice Certain values related to the CurveState aren't stored (to save storage),\n *    but are relatively gas expensive to calculate. As such we want to cache these\n *    calculations in memory whenever possible to avoid duplicated effort. This library\n *    provides a convenient facility for that. */\nlibrary CurveCache {\n    using TickMath for uint128;\n    using CurveMath for CurveMath.CurveState;\n\n    /* @notice Represents the underlying CurveState along with the tick price memory\n     *         cache, and associated bookeeping.\n     * \n     * @param curve_ The underlying CurveState object.\n     * @params isTickClean_ If true, then the current price tick value is valid to use.\n     * @params unsafePriceTick_ The price tick value (if previously cached). User should\n     *              not access directly, but use the pullPriceTick() helper function. */\n    struct Cache {\n        CurveMath.CurveState curve_;\n        bool isTickClean_;\n        int24 unsafePriceTick_;\n    }\n\n    /* @notice Given a curve cache instance retrieves the price tick, if cached, or \n     *         calculates and cached if cache is dirty. */\n    function pullPriceTick (Cache memory cache) internal pure returns (int24) {\n        if (!cache.isTickClean_) {\n            cache.unsafePriceTick_ = cache.curve_.priceRoot_.getTickAtSqrtRatio();\n            cache.isTickClean_ = true;\n        }\n        return cache.unsafePriceTick_;\n    }\n\n    /* @notice Call on a curve cache object, when the underlying price has changed, and\n     *         therefore the cache should be conisdered dirty. */\n    function dirtyPrice (Cache memory cache) internal pure {\n        cache.isTickClean_ = false;\n    }\n}\n"
    },
    "contracts/libraries/CurveMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\n\npragma solidity 0.8.19;\npragma experimental ABIEncoderV2;\n\nimport './SafeCast.sol';\nimport './FixedPoint.sol';\nimport './LiquidityMath.sol';\nimport './CompoundMath.sol';\n\n/* @title Curve and swap math library\n * @notice Library that defines locally stable constant liquidity curves and\n *         swap struct, as well as functions to derive impact and aggregate \n *         liquidity measures on these objects. */\nlibrary CurveMath {\n    using LiquidityMath for uint128;\n    using CompoundMath for uint256;\n    using SafeCast for uint256;\n    using SafeCast for uint192;\n\n    /* All SdexSwap swaps occur as legs across locally stable constant-product AMM\n     * curves. For large moves across tick boundaries, the state of this curve might \n     * change as range-bound liquidity is kicked in or out of the currently active \n     * curve. But for small moves within tick boundaries (or between tick boundaries \n     * with no liquidity bumps), the curve behaves like a classic constant-product AMM.\n     *\n     * SdexSwap tracks two types of liquidity. 1) Ambient liquidity that is non-\n     * range bound and remains active at all prices from zero to infinity, until \n     * removed by the staking user. 2) Concentrated liquidity that is tied to an \n     * arbitrary lower<->upper tick range and is kicked out of the curve when the\n     * price moves out of range.\n     *\n     * In the SdexSwap model all collected fees are directly incorporated as expanded\n     * liquidity onto the curve itself. (See CurveAssimilate.sol for more on the \n     * mechanics.) All accumulated fees are added as ambient-type liquidity, even those\n     * fees that belong to the pro-rata share of the active concentrated liquidity.\n     * This is because on an aggregate level, we can't break down the pro-rata share\n     * of concentrated rewards to the potentially near infinite concentrated range\n     * possibilities.\n     *\n     * Because of this concentrated liquidity can be flatly represented as 1:1 with\n     * contributed liquidity. Ambient liquidity, in contrast, deflates over time as\n     * it accumulates rewards. Therefore it's represented in terms of seed amount,\n     * i.e. the equivalent of 1 unit of ambient liquidity contributed at the inception\n     * of the pool. As fees accumulate the conversion rate from seed to liquidity \n     * continues to increase. \n     *\n     * Finally concentrated liquidity rewards are represented in terms of accumulated\n     * ambient seeds. This automatically takes care of the compounding of ambient \n     * rewards compounded on top of concentrated rewards. \n     *\n     * @param priceRoot_ The square root of the price ratio exchange rate between the\n     *   base and quote-side tokens in the AMM curve. (represented in Q64.64 fixed point)\n     * @param ambientSeeds_ The total ambient liquidity seeds in the current curve. \n     *   (Inflated by seed deflator to get efective ambient liquidity)\n     * @param concLiq_ The total concentrated liquidity active and in range at the\n     *   current state of the curve.\n     * @param seedDeflator_ The cumulative growth rate (represented as Q16.48 fixed\n     *    point) of a hypothetical 1-unit of ambient liquidity held in the pool since\n     *    inception.\n     * @param concGrowth_ The cumulative rewards growth rate (represented as Q16.48\n     *   fixed point) of hypothetical 1 unit of concentrated liquidity in range in the\n     *   pool since inception. \n     *\n     * @dev Price ratio is stored as a square root because it makes reserve calculation\n     *      arithmetic much easier. To be conservative with collateral these growth \n     *      rates should always be rounded down from their real-value results. Some \n     *      minor lower-bound approximation is fine, since all it will result in is \n     *      slightly smaller reward payouts. */\n    struct CurveState {\n        uint128 priceRoot_;\n        uint128 ambientSeeds_;\n        uint128 concLiq_;\n        uint64 seedDeflator_;\n        uint64 concGrowth_;\n    }\n\n    \n    /* @notice Calculates the total amount of liquidity represented by the liquidity \n     *         curve object.\n     * @dev    Result always rounds down from the real value, *assuming* that the fee\n     *         accumulation fields are conservative lower-bound rounded.\n     * @param curve - The currently active liqudity curve state. Remember this curve \n     *    state is only known to be valid within the current tick.\n     * @return - The total scalar liquidity. Equivalent to sqrt(X*Y) in an equivalent \n     *           constant-product AMM. */\n    function activeLiquidity (CurveState memory curve) internal pure returns (uint128) {\n        uint128 ambient = CompoundMath.inflateLiqSeed\n            (curve.ambientSeeds_, curve.seedDeflator_);\n        return LiquidityMath.addLiq(ambient, curve.concLiq_);\n    }\n\n    /* @notice Similar to calcLimitFlows(), except returns the max possible flow in the\n     *   *opposite* direction. I.e. if inBaseQty_ is True, returns the quote token flow\n     *   for the swap. And vice versa..\n     *\n     * @dev The fixed-point result approximates the real valued formula with close but\n     *   directionally unpredicable precision. It could be slightly above or slightly\n     *   below. In the case of zero flows this could be substantially over. This \n     *   function should not be used in any context with strict directional boundness \n     *   requirements. */\n    function calcLimitCounter (CurveState memory curve, uint128 swapQty, bool inBaseQty,\n                               uint128 limitPrice) internal pure returns (uint128) {\n        bool isBuy = limitPrice > curve.priceRoot_;\n        uint128 denomFlow = calcLimitFlows(curve, swapQty, inBaseQty, limitPrice);\n        return invertFlow(activeLiquidity(curve), curve.priceRoot_,\n                          denomFlow, isBuy, inBaseQty);\n    }\n\n    /* @notice Calculates the total quantity of tokens that can be swapped on the AMM\n     *   curve until either 1) the limit price is reached or 2) the swap fills its \n     *   entire remaining quantity.\n     *\n     * @dev This function does *NOT* account for the possibility of concentrated liq\n     *   being knocked in/out as the price on the AMM curve moves across tick boundaries.\n     *   It's the responsibility of the caller to properly check whether the limit price\n     *   is within the bounds of the locally stable curve.\n     *\n     * @dev As long as CurveState's fee accum fields are conservatively lower bounded,\n     *   and as long as limitPrice is accurate, then this function rounds down from the\n     *   true real value. At most this round down loss of precision is tightly bounded at\n     *   2 wei. (See comments in deltaPriceQuote() function)\n     * \n     * @param curve - The current state of the liquidity curve. No guarantee that it's\n     *   liquidity stable through the entire limit range (see @dev above). Note that this\n     *   function does *not* update the curve struct object.   \n     * @param swapQty - The total remaining quantity left in the swap.\n     * @param inBaseQty - Whether the swap quantity is denomianted in base or quote side\n     *                    token.\n     * @param limitPrice - The highest (lowest) acceptable ending price of the AMM curve\n     *   for a buy (sell) swap. Represented as Q64.64 fixed point square root of the \n     *   price. \n     *\n     * @return - The maximum executable swap flow (rounded down by fixed precision).\n     *           Denominated on the token side based on inBaseQty param. Will\n     *           always return unsigned magnitude regardless of the direction. User\n     *           can easily determine based on swap context. */\n    function calcLimitFlows (CurveState memory curve, uint128 swapQty,\n                             bool inBaseQty, uint128 limitPrice)\n        internal pure returns (uint128) {\n        uint128 limitFlow = calcLimitFlows(curve, inBaseQty, limitPrice);\n        return limitFlow > swapQty ? swapQty : limitFlow;\n    }\n    \n    function calcLimitFlows (CurveState memory curve, bool inBaseQty,\n                             uint128 limitPrice) private pure returns (uint128) {\n        uint128 liq = activeLiquidity(curve);\n        return inBaseQty ?\n            deltaBase(liq, curve.priceRoot_, limitPrice) :\n            deltaQuote(liq, curve.priceRoot_, limitPrice);\n    }\n\n    /* @notice Calculates the change to base token reserves associated with a price\n     *   move along an AMM curve of constant liquidity.\n     *\n     * @dev Result is a tight lower-bound for fixed-point precision. Meaning if the\n     *   the returned limit is X, then X will be inside the limit price and (X+1)\n     *   will be outside the limit price. */\n    function deltaBase (uint128 liq, uint128 priceX, uint128 priceY)\n        internal pure returns (uint128) {\n        unchecked {\n        uint128 priceDelta = priceX > priceY ?\n            priceX - priceY : priceY - priceX; // Condition assures never underflows\n        return reserveAtPrice(liq, priceDelta, true);\n        }\n    }\n\n    /* @notice Calculates the change to quote token reserves associated with a price\n     *   move along an AMM curve of constant liquidity.\n     * \n     * @dev Result is almost always within a fixed-point precision unit from the true\n     *   real value. However in certain rare cases, the result could be up to 2 wei\n     *   below the true mathematical value. Caller should account for this */\n    function deltaQuote (uint128 liq, uint128 price, uint128 limitPrice)\n        internal pure returns (uint128) {\n        // For purposes of downstream calculations, we make sure that limit price is\n        // larger. End result is symmetrical anyway\n        if (limitPrice > price) {\n            return calcQuoteDelta(liq, limitPrice, price);\n        } else {\n            return calcQuoteDelta(liq, price, limitPrice);\n        }\n    }\n\n    /* The formula calculated is\n     *    F = L * d / (P*P')\n     *   (where F is the flow to the limit price, where L is liquidity, d is delta, \n     *    P is price and P' is limit price)\n     *\n     * Calculating this requires two stacked mulDiv. To meet the function's contract\n     * we need to compute the result with tight fixed point boundaries at or below\n     * 2 wei to conform to the function's contract.\n     * \n     * The fixed point calculation of flow is\n     *    F = mulDiv(mulDiv(...)) = FR - FF\n     *  (where F is the fixed point result of the formula, FR is the true real valued\n     *   result with inifnite precision, FF is the loss of precision fractional round\n     *   down, mulDiv(...) is a fixed point mulDiv call of the form X*Y/Z)\n     *\n     * The individual fixed point terms are\n     *    T1 = mulDiv(X1, Y1, Z1) = T1R - T1F\n     *    T2 = mulDiv(T1, Y2, Z2) = T2R - T2F\n     *  (where T1 and T2 are the fixed point results from the first and second term,\n     *   T1R and T2R are the real valued results from an infinite precision mulDiv,\n     *   T1F and T2F are the fractional round downs, X1/Y1/Z1/Y2/Z2 are the arbitrary\n     *   input terms in the fixed point calculation)\n     *\n     * Therefore the total loss of precision is\n     *    FF = T2F + T1F * T2R/T1\n     *\n     * To guarantee a 2 wei precision loss boundary:\n     *    FF <= 2\n     *    T2F + T1F * T2R/T1 <= 2\n     *    T1F * T2R/T1 <=  1      (since T2F as a round-down is always < 1)\n     *    T2R/T1 <= 1             (since T1F as a round-down is always < 1)\n     *    Y2/Z2 >= 1\n     *    Z2 >= Y2 */\n    function calcQuoteDelta (uint128 liq, uint128 priceBig, uint128 priceSmall)\n        private pure returns (uint128) {\n        uint128 priceDelta = priceBig - priceSmall;\n\n        // This is cast to uint256 but is guaranteed to be less than 2^192 based off\n        // the return type of divQ64\n        uint256 termOne = FixedPoint.divQ64(liq, priceSmall);\n        \n        // As long as the final result doesn't overflow from 128-bits, this term is\n        // guaranteed not to overflow from 256 bits. That's because the final divisor\n        // can be at most 128-bits, therefore this intermediate term must be 256 bits\n        // or less.\n        //\n        // By definition priceBig is always larger than priceDelta. Therefore the above\n        // condition of Z2 >= Y2 is satisfied and the equation caps at a maximum of 2\n        // wei of precision loss.\n        uint256 termTwo = termOne * uint256(priceDelta) / uint256(priceBig);\n        return termTwo.toUint128();\n    }\n\n    /* @notice Returns the amount of virtual reserves give the price and liquidity of the\n     *   constant-product liquidity curve.\n     *\n     * @dev The actual pool probably holds significantly less collateral because of the \n     *   use of concentrated liquidity. \n     * @dev Results always round down from the precise real-valued mathematical result.\n     * \n     * @param liq - The total active liquidity in AMM curve. Represented as sqrt(X*Y)\n     * @param price - The current active (square root of) price of the AMM curve. \n     *                 represnted as Q64.64 fixed point\n     * @param inBaseQty - The side of the pool to calculate the virtual reserves for.\n     *\n     * @returns The virtual reserves of the token (rounded down to nearest integer). \n     *   Equivalent to the amount of tokens that would be held for an equivalent \n     *   classical constant- product AMM without concentrated liquidity.  */\n    function reserveAtPrice (uint128 liq, uint128 price, bool inBaseQty)\n        internal pure returns (uint128) {\n        return (inBaseQty ?\n                    uint256(FixedPoint.mulQ64(liq, price)) :\n                    uint256(FixedPoint.divQ64(liq, price))).toUint128();\n    }\n\n    /* @notice Calculated the amount of concentrated liquidity within a price range\n     *         supported by a fixed amount of collateral. Note that this calculates the \n     *         collateral only needed by one side of the pair.\n     *\n     * @dev    Always rounds fixed-point arithmetic result down. \n     *\n     * @param collateral The total amount of token collateral being pledged.\n     * @param inBase If true, the collateral represents the base-side token in the pair.\n     *               If false the quote side token.\n     * @param priceX The price boundary of the concentrated liquidity position.\n     * @param priceY The other price boundary of the concentrated liquidity position.\n     * @returns The total amount of liquidity supported by the collateral. */\n    function liquiditySupported (uint128 collateral, bool inBase,\n                                 uint128 priceX, uint128 priceY)\n        internal pure returns (uint128) {\n        if (!inBase) {\n            return liquiditySupported(collateral, true,\n                                      FixedPoint.recipQ64(priceX),\n                                      FixedPoint.recipQ64(priceY));\n        } else {\n            unchecked {\n            uint128 priceDelta = priceX > priceY ?\n                priceX - priceY : priceY - priceX; // Conditional assures never underflows\n            return liquiditySupported(collateral, true, priceDelta);\n            }\n        }\n    }\n\n    /* @notice Calculated the amount of ambient liquidity supported by a fixed amount of \n     *         collateral. Note that this calculates the collateral only needed by one\n     *         side of the pair.\n     *\n     * @dev    Always rounds fixed-point arithmetic result down. \n     *\n     * @param collateral The total amount of token collateral being pledged.\n     * @param inBase If true, the collateral represents the base-side token in the pair.\n     *               If false the quote side token.\n     * @param price The current (square root) price of the curve as Q64.64 fixed point.\n     * @returns The total amount of ambient liquidity supported by the collateral. */\n    function liquiditySupported (uint128 collateral, bool inBase, uint128 price)\n        internal pure returns (uint128) {\n        return inBase ?\n            FixedPoint.divQ64(collateral, price).toUint128By192() :\n            FixedPoint.mulQ64(collateral, price).toUint128By192();\n    }\n\n    /* @dev The fixed point arithmetic results in output that's a close approximation\n     *   to the true real value, but could be skewed in either direction. The output\n     *   from this function should not be consumed in any context that requires strict\n     *   boundness. */\n    function invertFlow (uint128 liq, uint128 price, uint128 denomFlow,\n                         bool isBuy, bool inBaseQty) private pure returns (uint128) {\n        if (liq == 0) { return 0; }\n\n        uint256 invertReserve = reserveAtPrice(liq, price, !inBaseQty);\n        uint256 initReserve = reserveAtPrice(liq, price, inBaseQty);\n\n        unchecked {\n        uint256 endReserve = (isBuy == inBaseQty) ?\n            initReserve + denomFlow : // Will always fit in 256-bits\n            initReserve - denomFlow; // flow is always less than total reserves\n        if (endReserve == 0) { return type(uint128).max; }\n        \n        uint256 endInvert = uint256(liq) * uint256(liq) / endReserve;\n        return (endInvert > invertReserve ?\n                endInvert - invertReserve :\n                invertReserve - endInvert).toUint128();\n        }\n     }\n\n    /* @notice Computes the amount of token over-collateralization needed to buffer any \n     *   loss of precision rounding in the fixed price arithmetic on curve price. This\n     *   is necessary because price occurs in different units than tokens, and we can't\n     *   assume a single wei is sufficient to buffer one price unit.\n     * \n     * @dev In practice the price unit precision is almost always smaller than the token\n     *   token precision. Therefore the result is usually just 1 wei. The exception are\n     *   pools where liquidity is very high or price is very low. \n     *\n     * @param liq The total liquidity in the curve.\n     * @param price The (square root) price of the curve in Q64.64 fixed point\n     * @param inBase If true calculate the token precision on the base side of the pair.\n     *               Otherwise, calculate on the quote token side. \n     *\n     * @return The conservative upper bound in number of tokens that should be \n     *   burned to over-collateralize a single precision unit of price rounding. If\n     *   the price arithmetic involves multiple units of precision loss, this number\n     *   should be multiplied by that factor. */\n    function priceToTokenPrecision (uint128 liq, uint128 price,\n                                    bool inBase) internal pure returns (uint128) {\n        unchecked {\n        // To provide more base token collateral than price precision rounding:\n        //     delta(B) >= L * delta(P)\n        //     delta(P) <= 2^-64  (64 bit precision rounding)\n        //     delta(B) >= L * 2^-64\n        //  (where L is liquidity, B is base token reserves, P is price)\n        if (inBase) {\n            // Since liq is shifted right by 64 bits, adding one can never overflow\n            return (liq >> 64) + 1; \n            \n        } else {\n            // Calculate the quote reservs at the current price and a one unit price step,\n            // then take the difference as the minimum required quote tokens needed to\n            // buffer that price step.\n            uint192 step = FixedPoint.divQ64(liq, price - 1);\n            uint192 start = FixedPoint.divQ64(liq, price);\n\n            // next reserves will always be equal or greater than start reserves, so the \n            // subtraction will never underflow. \n            uint192 delta = step - start;\n\n            // Round tokens up conservative.\n            // This will never overflow because 192 bit nums incremented by 1 will always fit in\n            // 256 bits.\n            uint256 deltaRound = uint256(delta) + 1;\n\n            return deltaRound.toUint128();\n        }\n        }\n    }\n\n}\n"
    },
    "contracts/libraries/Directives.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\n\npragma solidity 0.8.19;\npragma experimental ABIEncoderV2;\n\nimport \"./SafeCast.sol\";\n\n/* @title Directive library\n * @notice This library defines common structs and associated helper functions for\n *         user defined trade action directives. */\nlibrary Directives {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    /* @notice Defines a single requested swap on a pre-specified pool.\n     *\n     * @dev A directive indicating no swap action must set *both* qty and limitPrice to\n     *      zero. qty=0 alone will indicate the use of a flexible back-filled rolling \n     *      quantity. \n     *\n     * @param isBuy_ If true, swap converts base-side token to quote-side token.\n     *               Vice-versa if false.\n     * @param inBaseQty_ If true, swap quantity is denominated in base-side token. \n     *                   If false in quote side token.\n     * @param rollType_  The flavor of rolling gap fill that should be applied (if any)\n     *                   to this leg of the directive. See Chaining.sol for list of\n     *                   rolling type codes.\n     * @param qty_ The total amount to be swapped. (Or rolling target if rollType_ is \n     *             enabled)\n     * @param limitPrice_ The maximum (minimum) *price to pay, if a buy (sell) swap\n     *           *at the margin*. I.e. the swap will keep exeucting until the curve\n     *           reaches this price (or exhausts the specified quantity.) Represented\n     *           as the square root of the pool's price ratio in Q64.64 fixed-point. */\n    struct SwapDirective {\n        bool isBuy_;\n        bool inBaseQty_;\n        uint8 rollType_;\n        uint128 qty_;\n        uint128 limitPrice_;\n    }\n\n    /* @notice Defines a sequence of mint/burn actions related to concentrated liquidity\n     *         range orders on a single pool.\n     *\n     * @param lowTick_ A single tick index that defines one side of the range order \n     *                 boundary for all range orders in this directive.\n     * @param highTick_ The tick index of the other side of the boundary of the range\n     *                  order.\n     * @param isAdd_ If true, the action mints new concentrated liquidity. If false, it\n     *               burns pre-existing concentrated liquidity. \n     * @param isTickRel_  If true indicates the low and high tick value should be take\n     *                    relative to the current price tick. E.g. -5 indicates 5 ticks\n     *                    below the current tick. Otherwise, high and low tick values are\n     *                    absolute tick index values.\n     * @param rollType_  The flavor of rolling gap fill that should be applied (if any)\n     *                   to this leg of the directive. See Chaining.sol for list of\n     *                   rolling type codes.\n     * @param liquidity_ The total amount of concentrated liquidity to add/remove.\n     *                   Represented as the equivalent of sqrt(X*Y) liquidity for the \n     *                   equivalent constant-product AMM curve. If rolling is turned\n     *                   on, this is instead interpreted as a rolling target value. */\n    struct ConcentratedDirective {\n        int24 lowTick_;\n        int24 highTick_;\n        bool isAdd_;\n        bool isTickRel_;\n        uint8 rollType_;\n        uint128 liquidity_;\n    }\n\n    /* @notice Along with a root open tick from above defines a single range order mint\n     *         or burn action.\n\n    /* @notice Defines a directive related to the mint/burn of ambient liquidity on a \n     *         single pre-specified curve.\n     *\n     * @dev A directive indicating no ambient mint/burn must set *both* isAdd to false and\n     *      liquidity to zero. liquidity=0 alone will indicate the use of a flxeible \n     *      back-filled rolling quantity in place.\n     *\n     * @param isAdd_ If true, the action mints new ambient liquidity. If false, burns \n     *               pre-existing liquidity in the curve.\n     * @param rollType_  The flavor of rolling gap fill that should be applied (if any)\n     *                   to this leg of the directive. See Chaining.sol for list of\n     *                   rolling type codes.\n     * @param liquidity_ The total amount of ambient liquidity to add/remove.\n     *                   Represented as the equivalent of sqrt(X*Y) liquidity for a\n     *                   constant-product AMM curve. (If this and rollType_ are zero,\n     *                   this is a non-action.) */\n    struct AmbientDirective {\n        bool isAdd_;\n        uint8 rollType_;\n        uint128 liquidity_;\n    }\n\n    /* @param rollExit_ If set to true, use the exit side of the pair's tokens when\n     *                  calculating rolling back-fill quantities.\n     * @param swapDefer_ If set to true, execute the swap directive *after* the passive\n     *                  mint/burn directives for the pool. If false, swap executes first.\n     * @param offsetSurplus_ If set to true offset any rolling back-fill quantities with\n     *                       the client's pre-existing surplus collateral at the dex. */\n    struct ChainingFlags {\n        bool rollExit_;\n        bool swapDefer_;\n        bool offsetSurplus_;\n    }\n\n    /* @notice Defines a full suite of trade action directives to be executed on a single\n     *         pool within a pre-specified pair.\n     * @param poolIdx_ The pool type index that identified the pool to be operated on in\n     *                 this pair.\n     * @param ambient_ Directive related to ambient liquidity actions (if any).\n     * @param conc_ Directives related to concentrated liquidity range orders (if any).\n     * @param swap_ Directive for the swap action on the pool (if any).\n     * @param chain_ Flags related to chaining order of the directive actions and how\n     *               rolling back fill is calculated. */\n    struct PoolDirective {\n        uint256 poolIdx_;\n        AmbientDirective ambient_;\n        ConcentratedDirective[] conc_;\n        SwapDirective swap_;\n        ChainingFlags chain_;\n    }\n\n    /* @notice Specifies the settlement procedures between user and dex related to\n     *         a single token within a chain of hops in a sequence of one or more\n     *         pairs. The same struct is used for the entry/exit terminal tokens as\n     *         well as intermediate tokens between pairs.\n     *\n     * @param token_ The tracker address to the token in the pair. (If set to zero \n     *              specifies native Ethereum as the pair asset.)\n     * @param limitQty_ A net flow limit that the user expects the execution to meet\n     *    or exceed. Otherwise the transaction is reverted. Negative specifies a minimum\n     *    credit from the pool to the user. Positive a maximum debit from user to the \n     *    pool. \n     * @param dustThresh_ A threshold, below which the user requests no transaction is\n     *    sent as part of a credit. (Debits are always collected.) Used to avoid \n     *    unnecessary gas cost of a token transfer on an economically meaningless value.\n     * @param useSurplus_ If set to true the settlement should attempt to complete using\n     *    the client's surplus collateral balance at the dex. */\n    struct SettlementChannel {\n        address token_;\n        int128 limitQty_;\n        uint128 dustThresh_;\n        bool useSurplus_;\n    }\n\n    /* @notice Specified if and how off-grid price improvement is being requested. (Note\n     *         that even if requested, there may be no price improvement set for the \n     *         token. To avoid wasted gas, user should check off-chain.)\n     * @param isEnabled_ By default, no price improvement is set, avoiding the gas cost\n     *         of a storage query. If true, indicates that the user wants to query the\n     *         price improvement settings. \n     * @param useBaseSide_ If true requests price improvement from the base-side token\n     *         in the pair. Otherwise, requested on the quote-side token. */\n    struct PriceImproveReq {\n        bool isEnabled_;\n        bool useBaseSide_;\n    }\n\n    /* @notice Defines a full directive related to a single hop in a sequence of pairs.\n     * @param pools_ Defines directives on one or more pools on the pair.\n     * @param settle_ Defines the settlement for the token on the *exit* side of the hop.\n     *         (The entry side is defined in the previous hop, or the open directive if\n     *          this is the first hop in the sequence.)\n     * @param improve_ Off-grid price improvement settings. */\n    struct HopDirective {\n        PoolDirective[] pools_;\n        SettlementChannel settle_;\n        PriceImproveReq improve_;\n    }\n\n    /* @notice Top-level trade order directive, encompassing an arbitrary collection of\n     *    of swap, mints, and burns across multiple pools within a chained sequence of \n     *    pairs. \n     * @param open_ Defines the token and settlement for the entry token in the first hop\n     *    in the chain.\n     * @param hops_ Defines a sequence of directives on pairs that will be executed in the\n     *    order specified by this array. */\n    struct OrderDirective {\n        SettlementChannel open_;\n        HopDirective[] hops_;\n    }\n\n}\n"
    },
    "contracts/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\npragma solidity 0.8.19;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n    uint256 internal constant Q64 = 0x10000000000000000;\n    uint256 internal constant Q48 = 0x1000000000000;\n\n    /* @notice Multiplies two Q64.64 numbers by each other. */\n    function mulQ64 (uint128 x, uint128 y) internal pure returns (uint192) {\n        unchecked { // 128 bit integers squared will always fit in 256-bits\n        return uint192((uint256(x) * uint256(y)) >> 64);\n        }\n    }\n\n    /* @notice Divides one Q64.64 number by another. */\n    function divQ64 (uint128 x, uint128 y) internal pure returns (uint192) {\n        unchecked { // No overflow or underflow possible in the below operations\n        return (uint192(x) << 64) / y;\n        }\n    }\n\n    /* @notice Multiplies a Q64.64 by a Q16.48. */\n    function mulQ48 (uint128 x, uint64 y) internal pure returns (uint144) {\n        unchecked { // 128 bit integers squared will always fit in 256-bits\n        return uint144((uint256(x) * uint256(y)) >> 48);\n        }\n    }\n\n    /* @notice Takes the reciprocal of a Q64.64 number. */\n    function recipQ64 (uint128 x) internal pure returns (uint128) {\n        unchecked { // Only possible overflow possible is captured with a specific check\n        uint256 div = uint256(FixedPoint.Q128) / uint256(x);\n        require(div <= type(uint128).max);\n        return uint128(div);\n        }\n    }\n}\n"
    },
    "contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.19;\n\nimport './SafeCast.sol';\nimport './TickMath.sol';\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        unchecked { // Arithmetic checks done explicitly\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x);\n        } else {\n            require((z = x + uint128(y)) >= x);\n        }\n        }\n    }\n\n    /// @notice Add an unsigned liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addLiq(uint128 x, uint128 y) internal pure returns (uint128 z) {\n        unchecked { // Arithmetic checks done explicitly\n        require((z = x + y) >= x);\n        }\n    }\n\n    /// @notice Add an unsigned liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addLots(uint96 x, uint96 y) internal pure returns (uint96 z) {\n        unchecked { // Arithmetic checks done explicitly\n        require((z = x + y) >= x);\n        }\n    }\n\n    /// @notice Subtract an unsigned liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function minusDelta(uint128 x, uint128 y) internal pure returns (uint128 z) {\n        z = x - y;\n    }\n\n    /* @notice Same as minusDelta, but operates on lots of liquidity rather than outright\n     *         liquiidty. */\n    function minusLots(uint96 x, uint96 y) internal pure returns (uint96 z) {\n        z = x - y;\n    }\n\n    /* In certain contexts we need to represent liquidity, but don't have the full 128 \n     * bits or precision. The compromise is to use \"lots\" of liquidity, which is liquidity\n     * represented as multiples of 1024. Usually in those contexts, max lots is capped at\n     * 2^96 (equivalent to 2^106 of liquidity.) \n     *\n     * More explanation, along with examples can be found in the documentation at \n     * docs/LiquidityLots.md in the project respository. */\n    uint16 constant LOT_SIZE = 1024;\n    uint8 constant LOT_SIZE_BITS = 10;\n    \n\n    /* By utilizing the least significant digit of the liquidity lots value, we can \n     * support special types of \"knockout\" liquidity, that when crossed trigger specific\n     * calls. The aggregate knockout liquidity will always sum to an odd number of lots\n     * whereas all vanilla resting liquidity will have an even number of lots. That\n     * means we can test whether any level has knockout liquidity simply by seeing if the\n     * the total sum is an odd number. \n     *\n     * More explanation, along with examples can be found in the documentation at \n     * docs/LiquidityLots.md in the project respository. */\n    uint96 constant KNOCKOUT_FLAG_MASK = 0x1;\n    uint8 constant LOT_ACTIVE_BITS = 11;\n\n    /* @notice Converts raw liquidity to lots of resting liquidity. (See comment above \n     *         defining lots. */\n    function liquidityToLots (uint128 liq) internal pure returns (uint96) {\n            uint256 lots = liq >> LOT_SIZE_BITS;\n            uint256 liqTrunc = lots << LOT_SIZE_BITS;\n            bool hasEmptyMask = (lots & KNOCKOUT_FLAG_MASK == 0);\n            require(hasEmptyMask &&\n                    liqTrunc == liq &&\n                    lots < type(uint96).max, \"FD\");\n            return uint96(lots);\n    }\n\n    /* @notice Checks if an aggergate lots counter contains a knockout liquidity component\n     *         by checking the least significant bit.\n     *\n     * @dev    Note that it's critical that the sum *total* of knockout lots on any\n     *         given level be an odd number. Don't add two odd knockout lots together\n     *         without renormalzing, because they'll sum to an even lot quantity. */\n    function hasKnockoutLiq (uint96 lots) internal pure returns (bool) {\n        return lots & KNOCKOUT_FLAG_MASK > 0;\n    }\n\n    /* @notice Truncates an existing liquidity quantity into a quantity that's a multiple\n     *         of the 2048-multiplier defining even-sized lots of liquidity. */\n    function shaveRoundLots (uint128 liq) internal pure returns (uint128) {\n        return (liq >> LOT_ACTIVE_BITS) << LOT_ACTIVE_BITS;\n    }\n\n    /* @notice Truncates an existing liquidity quantity into a quantity that's a multiple\n     *         of the 2048-multiplier defining even-sized lots of liquidity, but rounds up \n     *         to the next multiple of 2048. */\n    function shaveRoundLotsUp (uint128 liq) internal pure returns (uint128 result) {\n        unchecked {\n        require((liq & 0xfffffffffffffffffffffffffffff800) != 0xfffffffffffffffffffffffffffff800, \"overflow\");\n\n        // By shifting down 11 bits, adding the one will always fit in 128 bits\n        uint128 roundUp = (liq >> LOT_ACTIVE_BITS) + 1;\n        return (roundUp << LOT_ACTIVE_BITS);\n        }\n    }\n\n    /* @notice Given a number of lots of liquidity converts to raw liquidity value. */\n    function lotsToLiquidity (uint96 lots) internal pure returns (uint128) {\n        uint96 realLots = lots & ~KNOCKOUT_FLAG_MASK;\n        return uint128(realLots) << LOT_SIZE_BITS;\n    }\n\n    /* @notice Given a positive and negative delta lots value net out the raw liquidity\n     *         delta. */\n    function netLotsOnLiquidity (uint96 incrLots, uint96 decrLots) internal pure\n        returns (int128) {\n        unchecked {\n        // Original values are 96-bits, every possible difference will fit in signed-128 bits\n        return lotToNetLiq(incrLots) - lotToNetLiq(decrLots);\n        }\n    }\n\n    /* @notice Given an amount of lots of liquidity converts to a signed raw liquidity\n     *         delta. (Which by definition is always positive.) */\n    function lotToNetLiq (uint96 lots) internal pure returns (int128) {\n        return int128(lotsToLiquidity(lots));\n    }\n\n    \n    /* @notice Blends the weighted average of two fee reward accumulators based on the\n     *         relative size of two liquidity position.\n     *\n     * @dev To be conservative in terms of rewards/collateral, this function always\n     *   rounds up to 2 units of precision. We need mileage rounded up, so reward payouts\n     *   are rounded down. However this could lead to the technically \"impossible\" \n     *   situation where the mileage on a subsequent rewards burn is smaller than the\n     *   blended mileage in the liquidity postion. Technically this shouldn't happen \n     *   because mileage only increases through time. However this is a non-consequential\n     *   failure. burnPosLiq() just treats it as a zero reward situation, and the staker\n     *   loses an economically non-meaningful amount of rewards on the burn. */\n    function blendMileage (uint64 mileageX, uint128 liqX, uint64 mileageY, uint128 liqY)\n        internal pure returns (uint64) {\n        if (liqY == 0) { return mileageX; }\n        if (liqX == 0) { return mileageY; }\n        if (mileageX == mileageY) { return mileageX; }\n        uint64 termX = calcBlend(mileageX, liqX, liqX + liqY);\n        uint64 termY = calcBlend(mileageY, liqY, liqX + liqY);\n\n        // With mileage we want to be conservative on the upside. Under-estimating\n        // mileage means overpaying rewards. So, round up the fractional weights.\n        return (termX + 1) + (termY + 1);\n    }\n\n    /* @notice Blends the weighted average of two 72-bit fee reward accumulators based on the\n     *         relative size of two liquidity position.\n     * \n     * @dev See dev notes from blendMileage() method. Same logic applies. */\n    function blendMileage72 (uint72 mileageX, uint128 liqX, uint72 mileageY, uint128 liqY)\n        internal pure returns (uint72) {\n        if (liqY == 0) { return mileageX; }\n        if (liqX == 0) { return mileageY; }\n        if (mileageX == mileageY) { return mileageX; }\n        uint72 termX = calcBlend72(mileageX, liqX, liqX + liqY);\n        uint72 termY = calcBlend72(mileageY, liqY, liqX + liqY);\n\n        // With mileage we want to be conservative on the upside. Under-estimating\n        // mileage means overpaying rewards. So, round up the fractional weights.\n        return (termX + 1) + (termY + 1);\n    }\n    \n    /* @notice Calculates a weighted blend of adding incremental rewards mileage. */\n    function calcBlend (uint64 mileage, uint128 weight, uint128 total)\n        private pure returns (uint64) {\n        unchecked { // Intermediate results will always fit in 256-bits\n        // Can safely cast, because result will always be smaller than original since\n        // weight is less than total.\n        return uint64(uint256(mileage) * uint256(weight) / uint256(total));\n        }\n    }\n\n    /* @notice Calculates a weighted blend of adding incremental rewards mileage. */\n    function calcBlend72 (uint72 mileage, uint128 weight, uint128 total)\n        private pure returns (uint72) {\n        unchecked { // Intermediate results will always fit in 256-bits\n        // Can safely cast, because result will always be smaller than original since\n        // weight is less than total.\n        return uint72(uint256(mileage) * uint256(weight) / uint256(total));\n        }\n    }\n\n\n    /* @dev Computes a rounding safe calculation of the accumulated rewards rate based on\n     *      a beginning and end mileage counter. */\n    function deltaRewardsRate (uint64 feeMileage, uint64 oldMileage) internal pure\n        returns (uint64) {\n        uint64 REWARD_ROUND_DOWN = 2;\n        if (feeMileage > oldMileage + REWARD_ROUND_DOWN) {\n            return feeMileage - oldMileage - REWARD_ROUND_DOWN;\n        } else {\n            return 0;\n        }\n    }\n\n    /* @dev Computes a rounding safe calculation of the accumulated rewards for 72 bit mileage\n     *      delta snapshots. */\n    function deltaRewardsRate72 (uint72 feeMileage, uint72 oldMileage) internal pure\n        returns (uint64) {\n        uint72 REWARD_ROUND_DOWN = 2;\n        if (feeMileage > oldMileage + REWARD_ROUND_DOWN) {    \n            uint72 mileageDelta = feeMileage - oldMileage - REWARD_ROUND_DOWN;\n\n            // In practice a the cumulative growth in a curve, and therefore in any range,\n            // in the curve can never exceed 2^64. So in practice this mileage delta should\n            // never exceed 2^64. However, to be on the safe side we cap it to prevent\n            // overflow.\n            return mileageDelta > type(uint64).max ?\n                type(uint64).max : uint64(mileageDelta);\n\n        } else {\n            return 0;\n        }\n    }\n}\n"
    },
    "contracts/libraries/PoolSpecs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\n\npragma solidity 0.8.19;\npragma experimental ABIEncoderV2;\n\n/* @title Pool specification library.\n * @notice Library for defining, querying, and encoding the specifications of the\n *         parameters of a pool type. */\nlibrary PoolSpecs {\n\n    /* @notice Specifcations of the parameters of a single pool type. Any given pair\n     *         may have many different pool types, each of which may operate as segmented\n     *         markets with different underlying behavior to the AMM. \n     *\n     * @param schema_ Placeholder that defines the structure of the poolSpecs object in\n     *                in storage. Because slots initialize zero, 0 is used for an \n     *                unitialized or disabled pool. 1 is the only currently used schema\n     *                (for the below struct), but allows for upgradeability in the future\n     *\n     * @param feeRate_ The overall fee (liquidity fees + protocol fees inclusive) that\n     *            swappers pay to the pool as a fraction of notional. Represented as an \n     *            integer representing hundredths of a basis point. I.e. a 0.25% fee \n     *            would be 2500\n     *\n     * @param protocolTake_ The fraction of the fee rate that goes to the protocol fee \n     *             (the rest accumulates as a liquidity fee to LPs). Represented in units\n     *             of 1/256. Since uint8 can represent up to 255, protocol could take\n     *             as much as 99.6% of liquidity fees. However currently the protocol\n     *             set function prohibits values above 128, i.e. 50% of liquidity fees. \n     *             (See set ProtocolTakeRate in PoolRegistry.sol)\n     *\n     * @param tickSize The minimum granularity of price ticks defining a grid, on which \n     *          range orders may be placed. (Outside off-grid price improvement facility.)\n     *          For example a value of 50 would mean that range order bounds could only\n     *          be placed on every 50th price tick, guaranteeing a minimum separation of\n     *          0.005% (50 one basis point ticks) between bump points.\n     *\n     * @param jitThresh_ Sets the minimum TTL for concentrated LP positions in the pool.\n     *                   Represented in units of 10 seconds (as measured by block time)\n     *                   E.g. a value of 5 equates to a minimum TTL of 50 seconds.\n     *                   Attempts to burn or partially burn an LP position in less than\n     *                   N seconds (as measured in block.timestamp) after a position was\n     *                   minted (or had its liquidity increased) will revert. If set to\n     *                   0, atomically flashed liquidity that mints->burns in the same\n     *                   block is enabled.\n     *\n     * @param knockoutBits_ Defines the parameters for where and how knockout liquidity\n     *                      is allowed in the pool. (See KnockoutLiq library for a full\n     *                      description of the bit field.)\n     *\n     * @param oracleFlags_ Bitmap flags to indicate the pool's oracle permission \n     *                     requirements. Current implementation only uses the least \n     *                     significant bit, which if on checks oracle permission on every\n     *                     pool related call. Otherwise pool is permissionless. */\n    struct Pool {\n        uint8 schema_;\n        uint16 feeRate_;\n        uint8 protocolTake_;\n        uint16 tickSize_;\n        uint8 jitThresh_;\n        uint8 knockoutBits_;\n        uint8 oracleFlags_;\n    }\n\n    uint8 constant BASE_SCHEMA = 1;\n    uint8 constant DISABLED_SCHEMA = 0;\n\n    /* @notice Convenience struct that's used to gather all useful context about on a \n     *         specific pool.\n     * @param head_ The full specification for the pool. (See struct Pool comments above.)\n     * @param hash_ The keccak256 hash used to encode the full pool location.\n     * @param oracle_ The permission oracle associated with this pool (0 if pool is \n     *                permissionless.) */\n    struct PoolCursor {\n        Pool head_;\n        bytes32 hash_;\n        address oracle_;\n    }\n\n\n    /* @notice Given a mapping of pools, a base/quote token pair and a pool type index,\n     *         copies the pool specification to memory. */\n    function queryPool (mapping(bytes32 => Pool) storage pools,\n                        address tokenX, address tokenY, uint256 poolIdx)\n        internal view returns (PoolCursor memory specs) {\n        bytes32 key = encodeKey(tokenX, tokenY, poolIdx);\n        Pool memory pool = pools[key];\n        address oracle = oracleForPool(poolIdx, pool.oracleFlags_);\n        return PoolCursor ({head_: pool, hash_: key, oracle_: oracle});\n    }\n\n    /* @notice Given a mapping of pools, a base/quote token pair and a pool type index,\n     *         retrieves a storage reference to the pool specification. */\n    function selectPool (mapping(bytes32 => Pool) storage pools,\n                         address tokenX, address tokenY, uint256 poolIdx)\n        internal view returns (Pool storage specs) {\n        bytes32 key = encodeKey(tokenX, tokenY, poolIdx);\n        return pools[key];\n    }\n\n    /* @notice Writes a pool specification for a pair and pool type combination. */\n    function writePool (mapping(bytes32 => Pool) storage pools,\n                        address tokenX, address tokenY, uint256 poolIdx,\n                        Pool memory val) internal {\n        bytes32 key = encodeKey(tokenX, tokenY, poolIdx);\n        pools[key] = val;\n    }\n\n    /* @notice Hashes the key associated with a pool for a base/quote asset pair and\n     *         a specific pool type index. */\n    function encodeKey (address tokenX, address tokenY, uint256 poolIdx)\n        internal pure returns (bytes32) {\n        require(tokenX < tokenY);\n        return keccak256(abi.encode(tokenX, tokenY, poolIdx));\n    }\n\n    /* @notice Returns the permission oracle associated with the pool (or 0 if pool is\n     *         permissionless. \n     *\n     * @dev    The oracle (if enabled on pool settings) is always deterministically based\n     *         on the first 160-bits of the pool type value. This means users can know \n     *         ahead of time if a pool can be oracled by checking the bits in the pool\n     *         index. */\n    function oracleForPool (uint256 poolIdx, uint8 oracleFlags)\n        internal pure returns (address) {\n        uint8 ORACLE_ENABLED_MASK = 0x1;\n        bool oracleEnabled = (oracleFlags & ORACLE_ENABLED_MASK == 1);\n        return oracleEnabled ?\n            address(uint160(poolIdx >> 96)) :\n            address(0);\n    }\n\n    /* @notice Constructs a cryptographically unique virtual address based off a base\n     *         address (either virtual or real), and a salt unique to the base address.\n     *         Can be used to create synthetic tokens, users, etc.\n     *\n     * @param base The address of the base root.\n     * @param salt A salt unique to the base token tracker contract.\n     *\n     * @return A synthetic token address corresponding to the specific virtual address. */\n    function virtualizeAddress (address base, uint256 salt) internal\n        pure returns (address) {\n        bytes32 hash = keccak256(abi.encode(base, salt));\n        uint160 hashTrail = uint160((uint256(hash) << 96) >> 96);\n        return address(hashTrail);\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.19;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        unchecked { // Explicit bounds check\n        require((z = uint160(y)) == y);\n        }\n    }\n    \n    /// @notice Cast a uint256 to a uint128, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint128\n    function toUint128(uint256 y) internal pure returns (uint128 z) {\n        unchecked { // Explicit bounds check\n        require((z = uint128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint192 to a uint128, revert on overflow\n    /// @param y The uint192 to be downcasted\n    /// @return z The downcasted integer, now type uint128\n    function toUint128By192(uint192 y) internal pure returns (uint128 z) {\n        unchecked { // Explicit bounds check\n        require((z = uint128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint144 to a uint128, revert on overflow\n    /// @param y The uint144 to be downcasted\n    /// @return z The downcasted integer, now type uint128\n    function toUint128By144(uint144 y) internal pure returns (uint128 z) {\n        unchecked{ // Explicit bounds check\n        require((z = uint128(y)) == y);\n        }\n    }\n    \n    /// @notice Cast a uint128 to a int128, revert on overflow\n    /// @param y The uint128 to be casted\n    /// @return z The casted integer, now type int128\n    function toInt128Sign(uint128 y) internal pure returns (int128 z) {\n        unchecked { // Explicit bounds check\n        require(y < 2**127);\n        return int128(y);\n        }\n    }\n\n    // Unix timestamp can fit into 32-bits until the year 2106. After which, internally\n    // stored timestamps will stop increasing. Deployed contracts relying on this function\n    // should be re-evaluated before that date.\n    function timeUint32() internal view returns (uint32) {\n        unchecked { // Explicit bounds check\n        uint time = block.timestamp;\n        if (time > type(uint32).max) { return type(uint32).max; }\n        return uint32(time);\n        }\n    }\n}\n"
    },
    "contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.19;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.64 numbers. Supports\n/// prices between 2**-96 and 2**120\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-96\n    int24 internal constant MIN_TICK = -665454;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**120\n    int24 internal constant MAX_TICK = 831818;\n    \n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK). The reason we don't set this as min(uint128) is so that single precicion moves represent a small fraction.\n    uint128 internal constant MIN_SQRT_RATIO = 65538;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint128 internal constant MAX_SQRT_RATIO = 21267430153580247136652501917186561138;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^64\n    /// @dev Throws if tick < MIN_TICK or tick > MAX_TICK\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX64 A Fixed point Q64.64 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint128 sqrtPriceX64) {\n        // Set to unchecked, but the original UniV3 library was written in a pre-checked version of Solidity\n        unchecked { \n        require(tick >= MIN_TICK && tick <= MAX_TICK);\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<64 rounding up to go from a Q128.128 to a Q64.64\n        // we then downcast because we know the result always fits within 128 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX64 = uint128((ratio >> 64) + (ratio % (1 << 64) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX64 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX64 The sqrt ratio for which to compute the tick as a Q64.64\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint128 sqrtPriceX64) internal pure returns (int24 tick) {\n        // Set to unchecked, but the original UniV3 library was written in a pre-checked version of Solidity\n        unchecked {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX64 >= MIN_SQRT_RATIO && sqrtPriceX64 < MAX_SQRT_RATIO);\n        uint256 ratio = uint256(sqrtPriceX64) << 64;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX64 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "contracts/periphery/SdexLpErc20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\n\npragma solidity 0.8.19;\n\nimport \"../libraries/PoolSpecs.sol\";\nimport \"../interfaces/ISdexLpConduit.sol\";\nimport \"../interfaces/ISdexMinion.sol\";\nimport { ERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract SdexLpErc20 is ERC20Upgradeable, ISdexLpConduit {\n\n    bytes32 public poolHash;\n    address public baseToken;\n    address public quoteToken;\n    uint256 public poolType;\n    address public sdex;\n\n    modifier onlySdex() {\n        require(msg.sender == sdex, \"SdexLpErc20: only Sdex\");\n        _;\n    }\n    \n    function initialize (address _base, address _quote, uint256 _poolIdx, address _sdex) public initializer {\n\n         //ERC20 (\"Sdex Ambient LP ERC20 Token\", \"LP-SdexAmb\", 18) {\n\n        // SdexSwap protocol uses 0x0 for native ETH, so it's possible that base\n        // token could be 0x0, which means the pair is against native ETH. quote\n        // will never be 0x0 because native ETH will always be the base side of\n        // the pair.\n        require(_quote != address(0) && _base != _quote && _quote > _base, \"Invalid Token Pair\");\n\n        bytes memory callData = abi.encodePacked(bytes4(keccak256(bytes(\"acceptSdexDex()\"))));\n        (bool success, ) = _sdex.call(callData);\n        require(success, \"SdexLpErc20: Wrong _dex address - acceptSdexDex() failed\");\n\n        baseToken = _base;\n        quoteToken = _quote;\n        poolType = _poolIdx;\n        poolHash = PoolSpecs.encodeKey(_base, _quote, _poolIdx);\n        sdex = _sdex;\n\n        __ERC20_init(\"Sdex Ambient LP ERC20 Token\", \"LP-SdexAmb\");\n    }\n    \n    function depositSdexLiq (address sender, bytes32 pool,\n                             int24 lowerTick, int24 upperTick, uint128 seeds,\n                             uint72) public override onlySdex returns (bool) {\n        require(pool == poolHash, \"Wrong pool\");\n        require(lowerTick == 0 && upperTick == 0, \"Non-Ambient LP Deposit\");\n        _mint(sender, seeds);\n        return true;\n    }\n\n    function withdrawSdexLiq (address sender, bytes32 pool,\n                              int24 lowerTick, int24 upperTick, uint128 seeds,\n                              uint72) public override onlySdex returns (bool) {\n        require(pool == poolHash, \"Wrong pool\");\n        require(lowerTick == 0 && upperTick == 0, \"Non-Ambient LP Deposit\");\n        _burn(sender, seeds);\n        return true;\n    }\n\n}\n"
    },
    "contracts/proxy/SdexBeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\ninterface IOwnable {\n    function owner() external view returns (address);\n}\n\ncontract SdexBeaconProxy is BeaconProxy {\n   constructor(address _beaconAddress, bytes memory _data) payable BeaconProxy(_beaconAddress, _data) {}\n\n   function getBeacon() external view returns (address) {\n      return _getBeacon();\n   }\n\n   modifier onlyBeaconOwner {\n      require(msg.sender == IOwnable(_getBeacon()).owner(), \"Only beacon owner\");\n      _;\n   }\n\n   function setBeacon(address _newBeacon, bytes memory _data) external virtual onlyBeaconOwner {\n      _setBeacon(_newBeacon, _data);\n   }\n\n}"
    },
    "contracts/proxy/SdexUpgradableBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract SdexUpgradableBeacon is UpgradeableBeacon, Pausable {\n    constructor (address _implementation, address _owner) UpgradeableBeacon(_implementation) {\n        if(_owner != address(0)) {\n            _transferOwnership(_owner);\n        }\n    }\n    \n    function pause() external virtual onlyOwner{\n        _pause();\n    }\n    function unpause() external virtual onlyOwner{\n        _unpause();\n    }\n\n    function implementation() public view virtual override whenNotPaused() returns (address) {\n        return UpgradeableBeacon.implementation();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}